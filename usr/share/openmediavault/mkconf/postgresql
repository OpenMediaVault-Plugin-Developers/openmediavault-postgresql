#!/bin/sh
#
# Copyright (C) 2010-2012 Ian Moore <imooreyahoo@gmail.com>
# Copyright (C) 2013-2015 OpenMediaVault Plugin Developers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

POSTGRESQL_CONFIG="/etc/postgresql/9.1/main/postgresql.conf"
OMV_POSTGRESQL_PLUGIN_XPATH="//services/postgresql"

detect_database_files()
{
    if [ ! -d "${1}" ]; then
        echo "Directory ${1} doesn't exist."

        return 1
    fi

    # Check for postgresql database files
    if [ ! -e "${1}/PG_VERSION" ]; then
        echo "Unable to find any database files in ${1}."

        return 3
    fi

    return 0
}

# Generate configuration only if the service is enabled.
if [ "$(omv_config_get "${OMV_POSTGRESQL_PLUGIN_XPATH}/enable")" != "1" ]; then
    exit 0
fi

# Get settings.
data_sharedfolderref=$(omv_config_get "${OMV_POSTGRESQL_PLUGIN_XPATH}/data.sharedfolderref")
data_directory="$(omv_get_sharedfolder_path "${data_sharedfolderref}")"
port=$(omv_config_get "${OMV_POSTGRESQL_PLUGIN_XPATH}/port")
listen_addresses=$(omv_config_get "${OMV_POSTGRESQL_PLUGIN_XPATH}/bind_address")
extra_options=$(omv_config_get "${OMV_POSTGRESQL_PLUGIN_XPATH}/extra_options")

current_data_directory=`cat ${POSTGRESQL_CONFIG} | grep data_directory | cut -d\' -f2`

# Check if any database files exists in the current data directory.
if ! detect_database_files "${current_data_directory}" ; then
    if ! detect_database_files "${data_directory}" ; then
        exit 3
    else
        current_data_directory=${data_directory}
    fi
fi

lc1=`cat ${POSTGRESQL_CONFIG} | grep lc_messages`
lc2=`cat ${POSTGRESQL_CONFIG} | grep lc_monetary`
lc3=`cat ${POSTGRESQL_CONFIG} | grep lc_numeric`
lc4=`cat ${POSTGRESQL_CONFIG} | grep lc_time`
dt1=`cat ${POSTGRESQL_CONFIG} | grep default_text_search_config`

cat <<EOF > ${POSTGRESQL_CONFIG}
# this file was automatically generated
data_directory = '${current_data_directory}'

hba_file = '/etc/postgresql/9.1/main/pg_hba.conf'
ident_file = '/etc/postgresql/9.1/main/pg_ident.conf'
external_pid_file = '/var/run/postgresql/9.1-main.pid'

listen_address = '${listen_address}'

port = ${port}
max_connections = 100

unix_socket_directory = '/var/run/postgresql'
ssl = true
shared_buffers = 32MB
log_line_prefix = '%t '

${lc1}
${lc2}
${lc3}
${lc4}

${dt1}

${extra_options}
EOF


if [ "${current_data_directory}" != "${data_directory}" ]; then
    # If the choosen directory already has database files, move the current
    # ones. Otherwise use the existing files. This is useful if the user has
    # reinstalled and wants to reuse the old files.
    if ! detect_database_files "${data_directory}" ; then
        # Copy current data to the new directory and remove all files from the
        # old directory (but not the directory itself).
        cp -rfp ${current_data_directory}/* ${data_directory}/
        rm -rf ${current_data_directory}/*
    fi

    # Take ownership of the shared folder.
    chown -R postgres:postgres "${data_directory}"
fi

exit 0
